// Mocks generated by Mockito 5.4.6 from annotations
// in educonnect/test/repositories/user_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i12;
import 'dart:io' as _i8;
import 'dart:typed_data' as _i10;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i3;
import 'package:educonnect/core/logger.dart' as _i11;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:storage_client/src/fetch.dart' as _i7;
import 'package:supabase/supabase.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettings_1 extends _i1.SmartFake implements _i3.Settings {
  _FakeSettings_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionReference_2<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWriteBatch_3 extends _i1.SmartFake implements _i4.WriteBatch {
  _FakeWriteBatch_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoadBundleTask_4 extends _i1.SmartFake
    implements _i4.LoadBundleTask {
  _FakeLoadBundleTask_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_5<T1 extends Object?> extends _i1.SmartFake
    implements _i4.QuerySnapshot<T1> {
  _FakeQuerySnapshot_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuery_6<T extends Object?> extends _i1.SmartFake
    implements _i4.Query<T> {
  _FakeQuery_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_7<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_8<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_9 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAggregateQuery_10 extends _i1.SmartFake
    implements _i4.AggregateQuery {
  _FakeAggregateQuery_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_11<T1 extends Object?> extends _i1.SmartFake
    implements _i4.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_12 extends _i1.SmartFake
    implements _i4.SnapshotMetadata {
  _FakeSnapshotMetadata_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransaction_13 extends _i1.SmartFake implements _i4.Transaction {
  _FakeTransaction_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFunctionsClient_14 extends _i1.SmartFake
    implements _i6.FunctionsClient {
  _FakeFunctionsClient_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseStorageClient_15 extends _i1.SmartFake
    implements _i6.SupabaseStorageClient {
  _FakeSupabaseStorageClient_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeClient_16 extends _i1.SmartFake
    implements _i6.RealtimeClient {
  _FakeRealtimeClient_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestClient_17 extends _i1.SmartFake
    implements _i6.PostgrestClient {
  _FakePostgrestClient_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueClient_18 extends _i1.SmartFake implements _i6.GoTrueClient {
  _FakeGoTrueClient_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQueryBuilder_19 extends _i1.SmartFake
    implements _i6.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQuerySchema_20 extends _i1.SmartFake
    implements _i6.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestFilterBuilder_21<T1> extends _i1.SmartFake
    implements _i6.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeChannel_22 extends _i1.SmartFake
    implements _i6.RealtimeChannel {
  _FakeRealtimeChannel_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFetch_23 extends _i1.SmartFake implements _i7.Fetch {
  _FakeFetch_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStorageFileApi_24 extends _i1.SmartFake
    implements _i6.StorageFileApi {
  _FakeStorageFileApi_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBucket_25 extends _i1.SmartFake implements _i6.Bucket {
  _FakeBucket_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSignedUploadURLResponse_26 extends _i1.SmartFake
    implements _i6.SignedUploadURLResponse {
  _FakeSignedUploadURLResponse_26(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileObjectV2_27 extends _i1.SmartFake implements _i6.FileObjectV2 {
  _FakeFileObjectV2_27(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_28 extends _i1.SmartFake implements _i8.File {
  _FakeFile_28(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_29 extends _i1.SmartFake implements Uri {
  _FakeUri_29(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_30 extends _i1.SmartFake implements _i8.Directory {
  _FakeDirectory_30(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_31 extends _i1.SmartFake
    implements _i8.FileSystemEntity {
  _FakeFileSystemEntity_31(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_32 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_32(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_33 extends _i1.SmartFake
    implements _i8.RandomAccessFile {
  _FakeRandomAccessFile_33(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_34 extends _i1.SmartFake implements _i8.IOSink {
  _FakeIOSink_34(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_35 extends _i1.SmartFake implements _i8.FileStat {
  _FakeFileStat_35(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  String get databaseId =>
      (super.noSuchMethod(
            Invocation.getter(#databaseId),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#databaseId),
            ),
          )
          as String);

  @override
  _i3.Settings get settings =>
      (super.noSuchMethod(
            Invocation.getter(#settings),
            returnValue: _FakeSettings_1(this, Invocation.getter(#settings)),
          )
          as _i3.Settings);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
    Invocation.setter(#databaseId, _databaseId),
    returnValueForMissingStub: null,
  );

  @override
  set settings(_i3.Settings? settings) => super.noSuchMethod(
    Invocation.setter(#settings, settings),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i4.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.WriteBatch batch() =>
      (super.noSuchMethod(
            Invocation.method(#batch, []),
            returnValue: _FakeWriteBatch_3(this, Invocation.method(#batch, [])),
          )
          as _i4.WriteBatch);

  @override
  _i5.Future<void> clearPersistence() =>
      (super.noSuchMethod(
            Invocation.method(#clearPersistence, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i4.LoadBundleTask loadBundle(_i10.Uint8List? bundle) =>
      (super.noSuchMethod(
            Invocation.method(#loadBundle, [bundle]),
            returnValue: _FakeLoadBundleTask_4(
              this,
              Invocation.method(#loadBundle, [bundle]),
            ),
          )
          as _i4.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #useFirestoreEmulator,
      [host, port],
      {#sslEnabled: sslEnabled, #automaticHostMapping: automaticHostMapping},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i4.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i3.GetOptions? options = const _i3.GetOptions(),
    required _i4.FromFirestore<T>? fromFirestore,
    required _i4.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #namedQueryWithConverterGet,
              [name],
              {
                #options: options,
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              },
            ),
            returnValue: _i5.Future<_i4.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_5<T>(
                this,
                Invocation.method(
                  #namedQueryWithConverterGet,
                  [name],
                  {
                    #options: options,
                    #fromFirestore: fromFirestore,
                    #toFirestore: toFirestore,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i4.QuerySnapshot<T>>);

  @override
  _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i3.GetOptions? options = const _i3.GetOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#namedQueryGet, [name], {#options: options}),
            returnValue:
                _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_5<Map<String, dynamic>>(
                    this,
                    Invocation.method(
                      #namedQueryGet,
                      [name],
                      {#options: options},
                    ),
                  ),
                ),
          )
          as _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
            Invocation.method(#collectionGroup, [collectionPath]),
            returnValue: _FakeQuery_6<Map<String, dynamic>>(
              this,
              Invocation.method(#collectionGroup, [collectionPath]),
            ),
          )
          as _i4.Query<Map<String, dynamic>>);

  @override
  _i5.Future<void> disableNetwork() =>
      (super.noSuchMethod(
            Invocation.method(#disableNetwork, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [documentPath]),
            returnValue: _FakeDocumentReference_7<Map<String, dynamic>>(
              this,
              Invocation.method(#doc, [documentPath]),
            ),
          )
          as _i4.DocumentReference<Map<String, dynamic>>);

  @override
  _i5.Future<void> enableNetwork() =>
      (super.noSuchMethod(
            Invocation.method(#enableNetwork, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(
            Invocation.method(#snapshotsInSync, []),
            returnValue: _i5.Stream<void>.empty(),
          )
          as _i5.Stream<void>);

  @override
  _i5.Future<T> runTransaction<T>(
    _i4.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runTransaction,
              [transactionHandler],
              {#timeout: timeout, #maxAttempts: maxAttempts},
            ),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runTransaction,
                      [transactionHandler],
                      {#timeout: timeout, #maxAttempts: maxAttempts},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_8<T>(
                  this,
                  Invocation.method(
                    #runTransaction,
                    [transactionHandler],
                    {#timeout: timeout, #maxAttempts: maxAttempts},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<void> terminate() =>
      (super.noSuchMethod(
            Invocation.method(#terminate, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(
            Invocation.method(#waitForPendingWrites, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
            Invocation.method(#setIndexConfigurationFromJSON, [json]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i4.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_9(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i4.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i5.Future<_i4.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(
            Invocation.method(#add, [data]),
            returnValue: _i5.Future<_i4.DocumentReference<T>>.value(
              _FakeDocumentReference_7<T>(
                this,
                Invocation.method(#add, [data]),
              ),
            ),
          )
          as _i5.Future<_i4.DocumentReference<T>>);

  @override
  _i4.DocumentReference<T> doc([String? path]) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [path]),
            returnValue: _FakeDocumentReference_7<T>(
              this,
              Invocation.method(#doc, [path]),
            ),
          )
          as _i4.DocumentReference<T>);

  @override
  _i4.CollectionReference<R> withConverter<R extends Object?>({
    required _i4.FromFirestore<R>? fromFirestore,
    required _i4.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeCollectionReference_2<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i4.CollectionReference<R>);

  @override
  _i4.Query<T> endAtDocument(_i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
            Invocation.method(#endAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endAtDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> endAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endAt, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endAt, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> endBeforeDocument(
    _i4.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endBeforeDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> endBefore(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endBefore, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endBefore, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i5.Future<_i4.QuerySnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue: _i5.Future<_i4.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_5<T>(this, Invocation.method(#get, [options])),
            ),
          )
          as _i5.Future<_i4.QuerySnapshot<T>>);

  @override
  _i4.Query<T> limit(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limit, [limit]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#limit, [limit]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> limitToLast(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToLast, [limit]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#limitToLast, [limit]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i5.Stream<_i4.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i3.ListenSource? source = _i3.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue: _i5.Stream<_i4.QuerySnapshot<T>>.empty(),
          )
          as _i5.Stream<_i4.QuerySnapshot<T>>);

  @override
  _i4.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
            Invocation.method(#orderBy, [field], {#descending: descending}),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#orderBy, [field], {#descending: descending}),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAfterDocument(
    _i4.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAfterDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAfterDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAfter(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAfter, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAfter, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAtDocument(
    _i4.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAtDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAt, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAt, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #where,
              [field],
              {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull,
              },
            ),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(
                #where,
                [field],
                {
                  #isEqualTo: isEqualTo,
                  #isNotEqualTo: isNotEqualTo,
                  #isLessThan: isLessThan,
                  #isLessThanOrEqualTo: isLessThanOrEqualTo,
                  #isGreaterThan: isGreaterThan,
                  #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                  #arrayContains: arrayContains,
                  #arrayContainsAny: arrayContainsAny,
                  #whereIn: whereIn,
                  #whereNotIn: whereNotIn,
                  #isNull: isNull,
                },
              ),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.AggregateQuery count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _FakeAggregateQuery_10(
              this,
              Invocation.method(#count, []),
            ),
          )
          as _i4.AggregateQuery);

  @override
  _i4.AggregateQuery aggregate(
    _i3.AggregateField? aggregateField1, [
    _i3.AggregateField? aggregateField2,
    _i3.AggregateField? aggregateField3,
    _i3.AggregateField? aggregateField4,
    _i3.AggregateField? aggregateField5,
    _i3.AggregateField? aggregateField6,
    _i3.AggregateField? aggregateField7,
    _i3.AggregateField? aggregateField8,
    _i3.AggregateField? aggregateField9,
    _i3.AggregateField? aggregateField10,
    _i3.AggregateField? aggregateField11,
    _i3.AggregateField? aggregateField12,
    _i3.AggregateField? aggregateField13,
    _i3.AggregateField? aggregateField14,
    _i3.AggregateField? aggregateField15,
    _i3.AggregateField? aggregateField16,
    _i3.AggregateField? aggregateField17,
    _i3.AggregateField? aggregateField18,
    _i3.AggregateField? aggregateField19,
    _i3.AggregateField? aggregateField20,
    _i3.AggregateField? aggregateField21,
    _i3.AggregateField? aggregateField22,
    _i3.AggregateField? aggregateField23,
    _i3.AggregateField? aggregateField24,
    _i3.AggregateField? aggregateField25,
    _i3.AggregateField? aggregateField26,
    _i3.AggregateField? aggregateField27,
    _i3.AggregateField? aggregateField28,
    _i3.AggregateField? aggregateField29,
    _i3.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#aggregate, [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ]),
            returnValue: _FakeAggregateQuery_10(
              this,
              Invocation.method(#aggregate, [
                aggregateField1,
                aggregateField2,
                aggregateField3,
                aggregateField4,
                aggregateField5,
                aggregateField6,
                aggregateField7,
                aggregateField8,
                aggregateField9,
                aggregateField10,
                aggregateField11,
                aggregateField12,
                aggregateField13,
                aggregateField14,
                aggregateField15,
                aggregateField16,
                aggregateField17,
                aggregateField18,
                aggregateField19,
                aggregateField20,
                aggregateField21,
                aggregateField22,
                aggregateField23,
                aggregateField24,
                aggregateField25,
                aggregateField26,
                aggregateField27,
                aggregateField28,
                aggregateField29,
                aggregateField30,
              ]),
            ),
          )
          as _i4.AggregateQuery);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_9(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i4.FirebaseFirestore);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i4.CollectionReference<T> get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeCollectionReference_2<T>(
              this,
              Invocation.getter(#parent),
            ),
          )
          as _i4.CollectionReference<T>);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i4.CollectionReference<Map<String, dynamic>>);

  @override
  _i5.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> update(Map<Object, Object?>? data) =>
      (super.noSuchMethod(
            Invocation.method(#update, [data]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i4.DocumentSnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue: _i5.Future<_i4.DocumentSnapshot<T>>.value(
              _FakeDocumentSnapshot_11<T>(
                this,
                Invocation.method(#get, [options]),
              ),
            ),
          )
          as _i5.Future<_i4.DocumentSnapshot<T>>);

  @override
  _i5.Stream<_i4.DocumentSnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i3.ListenSource? source = _i3.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue: _i5.Stream<_i4.DocumentSnapshot<T>>.empty(),
          )
          as _i5.Stream<_i4.DocumentSnapshot<T>>);

  @override
  _i5.Future<void> set(T? data, [_i3.SetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [data, options]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i4.DocumentReference<R> withConverter<R>({
    required _i4.FromFirestore<R>? fromFirestore,
    required _i4.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeDocumentReference_7<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i4.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i4.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i4.DocumentReference<T> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_7<T>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i4.DocumentReference<T>);

  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_12(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i4.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i4.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(
            Invocation.getter(#docs),
            returnValue: <_i4.QueryDocumentSnapshot<T>>[],
          )
          as List<_i4.QueryDocumentSnapshot<T>>);

  @override
  List<_i4.DocumentChange<T>> get docChanges =>
      (super.noSuchMethod(
            Invocation.getter(#docChanges),
            returnValue: <_i4.DocumentChange<T>>[],
          )
          as List<_i4.DocumentChange<T>>);

  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_12(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i4.SnapshotMetadata);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuery<T extends Object?> extends _i1.Mock implements _i4.Query<T> {
  MockQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_9(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i4.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Query<T> endAtDocument(_i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
            Invocation.method(#endAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endAtDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> endAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endAt, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endAt, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> endBeforeDocument(
    _i4.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endBeforeDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> endBefore(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endBefore, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#endBefore, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i5.Future<_i4.QuerySnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue: _i5.Future<_i4.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_5<T>(this, Invocation.method(#get, [options])),
            ),
          )
          as _i5.Future<_i4.QuerySnapshot<T>>);

  @override
  _i4.Query<T> limit(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limit, [limit]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#limit, [limit]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> limitToLast(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToLast, [limit]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#limitToLast, [limit]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i5.Stream<_i4.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i3.ListenSource? source = _i3.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue: _i5.Stream<_i4.QuerySnapshot<T>>.empty(),
          )
          as _i5.Stream<_i4.QuerySnapshot<T>>);

  @override
  _i4.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
            Invocation.method(#orderBy, [field], {#descending: descending}),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#orderBy, [field], {#descending: descending}),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAfterDocument(
    _i4.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAfterDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAfterDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAfter(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAfter, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAfter, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAtDocument(
    _i4.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAtDocument, [documentSnapshot]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> startAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAt, [values]),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#startAt, [values]),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #where,
              [field],
              {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull,
              },
            ),
            returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(
                #where,
                [field],
                {
                  #isEqualTo: isEqualTo,
                  #isNotEqualTo: isNotEqualTo,
                  #isLessThan: isLessThan,
                  #isLessThanOrEqualTo: isLessThanOrEqualTo,
                  #isGreaterThan: isGreaterThan,
                  #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                  #arrayContains: arrayContains,
                  #arrayContainsAny: arrayContainsAny,
                  #whereIn: whereIn,
                  #whereNotIn: whereNotIn,
                  #isNull: isNull,
                },
              ),
            ),
          )
          as _i4.Query<T>);

  @override
  _i4.Query<R> withConverter<R>({
    required _i4.FromFirestore<R>? fromFirestore,
    required _i4.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeQuery_6<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i4.Query<R>);

  @override
  _i4.AggregateQuery count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _FakeAggregateQuery_10(
              this,
              Invocation.method(#count, []),
            ),
          )
          as _i4.AggregateQuery);

  @override
  _i4.AggregateQuery aggregate(
    _i3.AggregateField? aggregateField1, [
    _i3.AggregateField? aggregateField2,
    _i3.AggregateField? aggregateField3,
    _i3.AggregateField? aggregateField4,
    _i3.AggregateField? aggregateField5,
    _i3.AggregateField? aggregateField6,
    _i3.AggregateField? aggregateField7,
    _i3.AggregateField? aggregateField8,
    _i3.AggregateField? aggregateField9,
    _i3.AggregateField? aggregateField10,
    _i3.AggregateField? aggregateField11,
    _i3.AggregateField? aggregateField12,
    _i3.AggregateField? aggregateField13,
    _i3.AggregateField? aggregateField14,
    _i3.AggregateField? aggregateField15,
    _i3.AggregateField? aggregateField16,
    _i3.AggregateField? aggregateField17,
    _i3.AggregateField? aggregateField18,
    _i3.AggregateField? aggregateField19,
    _i3.AggregateField? aggregateField20,
    _i3.AggregateField? aggregateField21,
    _i3.AggregateField? aggregateField22,
    _i3.AggregateField? aggregateField23,
    _i3.AggregateField? aggregateField24,
    _i3.AggregateField? aggregateField25,
    _i3.AggregateField? aggregateField26,
    _i3.AggregateField? aggregateField27,
    _i3.AggregateField? aggregateField28,
    _i3.AggregateField? aggregateField29,
    _i3.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#aggregate, [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ]),
            returnValue: _FakeAggregateQuery_10(
              this,
              Invocation.method(#aggregate, [
                aggregateField1,
                aggregateField2,
                aggregateField3,
                aggregateField4,
                aggregateField5,
                aggregateField6,
                aggregateField7,
                aggregateField8,
                aggregateField9,
                aggregateField10,
                aggregateField11,
                aggregateField12,
                aggregateField13,
                aggregateField14,
                aggregateField15,
                aggregateField16,
                aggregateField17,
                aggregateField18,
                aggregateField19,
                aggregateField20,
                aggregateField21,
                aggregateField22,
                aggregateField23,
                aggregateField24,
                aggregateField25,
                aggregateField26,
                aggregateField27,
                aggregateField28,
                aggregateField29,
                aggregateField30,
              ]),
            ),
          )
          as _i4.AggregateQuery);
}

/// A class which mocks [Transaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransaction extends _i1.Mock implements _i4.Transaction {
  MockTransaction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.DocumentSnapshot<T>> get<T extends Object?>(
    _i4.DocumentReference<T>? documentReference,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#get, [documentReference]),
            returnValue: _i5.Future<_i4.DocumentSnapshot<T>>.value(
              _FakeDocumentSnapshot_11<T>(
                this,
                Invocation.method(#get, [documentReference]),
              ),
            ),
          )
          as _i5.Future<_i4.DocumentSnapshot<T>>);

  @override
  _i4.Transaction delete(_i4.DocumentReference<Object?>? documentReference) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [documentReference]),
            returnValue: _FakeTransaction_13(
              this,
              Invocation.method(#delete, [documentReference]),
            ),
          )
          as _i4.Transaction);

  @override
  _i4.Transaction update(
    _i4.DocumentReference<Object?>? documentReference,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [documentReference, data]),
            returnValue: _FakeTransaction_13(
              this,
              Invocation.method(#update, [documentReference, data]),
            ),
          )
          as _i4.Transaction);

  @override
  _i4.Transaction set<T>(
    _i4.DocumentReference<T>? documentReference,
    T? data, [
    _i3.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [documentReference, data, options]),
            returnValue: _FakeTransaction_13(
              this,
              Invocation.method(#set, [documentReference, data, options]),
            ),
          )
          as _i4.Transaction);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i6.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FunctionsClient get functions =>
      (super.noSuchMethod(
            Invocation.getter(#functions),
            returnValue: _FakeFunctionsClient_14(
              this,
              Invocation.getter(#functions),
            ),
          )
          as _i6.FunctionsClient);

  @override
  _i6.SupabaseStorageClient get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeSupabaseStorageClient_15(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i6.SupabaseStorageClient);

  @override
  _i6.RealtimeClient get realtime =>
      (super.noSuchMethod(
            Invocation.getter(#realtime),
            returnValue: _FakeRealtimeClient_16(
              this,
              Invocation.getter(#realtime),
            ),
          )
          as _i6.RealtimeClient);

  @override
  _i6.PostgrestClient get rest =>
      (super.noSuchMethod(
            Invocation.getter(#rest),
            returnValue: _FakePostgrestClient_17(
              this,
              Invocation.getter(#rest),
            ),
          )
          as _i6.PostgrestClient);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i6.GoTrueClient get auth =>
      (super.noSuchMethod(
            Invocation.getter(#auth),
            returnValue: _FakeGoTrueClient_18(this, Invocation.getter(#auth)),
          )
          as _i6.GoTrueClient);

  @override
  set functions(_i6.FunctionsClient? _functions) => super.noSuchMethod(
    Invocation.setter(#functions, _functions),
    returnValueForMissingStub: null,
  );

  @override
  set storage(_i6.SupabaseStorageClient? _storage) => super.noSuchMethod(
    Invocation.setter(#storage, _storage),
    returnValueForMissingStub: null,
  );

  @override
  set realtime(_i6.RealtimeClient? _realtime) => super.noSuchMethod(
    Invocation.setter(#realtime, _realtime),
    returnValueForMissingStub: null,
  );

  @override
  set rest(_i6.PostgrestClient? _rest) => super.noSuchMethod(
    Invocation.setter(#rest, _rest),
    returnValueForMissingStub: null,
  );

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
    Invocation.setter(#headers, headers),
    returnValueForMissingStub: null,
  );

  @override
  _i6.SupabaseQueryBuilder from(String? table) =>
      (super.noSuchMethod(
            Invocation.method(#from, [table]),
            returnValue: _FakeSupabaseQueryBuilder_19(
              this,
              Invocation.method(#from, [table]),
            ),
          )
          as _i6.SupabaseQueryBuilder);

  @override
  _i6.SupabaseQuerySchema schema(String? schema) =>
      (super.noSuchMethod(
            Invocation.method(#schema, [schema]),
            returnValue: _FakeSupabaseQuerySchema_20(
              this,
              Invocation.method(#schema, [schema]),
            ),
          )
          as _i6.SupabaseQuerySchema);

  @override
  _i6.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#rpc, [fn], {#params: params, #get: get}),
            returnValue: _FakePostgrestFilterBuilder_21<T>(
              this,
              Invocation.method(#rpc, [fn], {#params: params, #get: get}),
            ),
          )
          as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.RealtimeChannel channel(
    String? name, {
    _i6.RealtimeChannelConfig? opts = const _i6.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#channel, [name], {#opts: opts}),
            returnValue: _FakeRealtimeChannel_22(
              this,
              Invocation.method(#channel, [name], {#opts: opts}),
            ),
          )
          as _i6.RealtimeChannel);

  @override
  List<_i6.RealtimeChannel> getChannels() =>
      (super.noSuchMethod(
            Invocation.method(#getChannels, []),
            returnValue: <_i6.RealtimeChannel>[],
          )
          as List<_i6.RealtimeChannel>);

  @override
  _i5.Future<String> removeChannel(_i6.RealtimeChannel? channel) =>
      (super.noSuchMethod(
            Invocation.method(#removeChannel, [channel]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#removeChannel, [channel]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<List<String>> removeAllChannels() =>
      (super.noSuchMethod(
            Invocation.method(#removeAllChannels, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [SupabaseStorageClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseStorageClient extends _i1.Mock
    implements _i6.SupabaseStorageClient {
  MockSupabaseStorageClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url =>
      (super.noSuchMethod(
            Invocation.getter(#url),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#url)),
          )
          as String);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i7.Fetch get storageFetch =>
      (super.noSuchMethod(
            Invocation.getter(#storageFetch),
            returnValue: _FakeFetch_23(this, Invocation.getter(#storageFetch)),
          )
          as _i7.Fetch);

  @override
  set storageFetch(_i7.Fetch? _storageFetch) => super.noSuchMethod(
    Invocation.setter(#storageFetch, _storageFetch),
    returnValueForMissingStub: null,
  );

  @override
  _i6.StorageFileApi from(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#from, [id]),
            returnValue: _FakeStorageFileApi_24(
              this,
              Invocation.method(#from, [id]),
            ),
          )
          as _i6.StorageFileApi);

  @override
  void setAuth(String? jwt) => super.noSuchMethod(
    Invocation.method(#setAuth, [jwt]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<List<_i6.Bucket>> listBuckets() =>
      (super.noSuchMethod(
            Invocation.method(#listBuckets, []),
            returnValue: _i5.Future<List<_i6.Bucket>>.value(<_i6.Bucket>[]),
          )
          as _i5.Future<List<_i6.Bucket>>);

  @override
  _i5.Future<_i6.Bucket> getBucket(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getBucket, [id]),
            returnValue: _i5.Future<_i6.Bucket>.value(
              _FakeBucket_25(this, Invocation.method(#getBucket, [id])),
            ),
          )
          as _i5.Future<_i6.Bucket>);

  @override
  _i5.Future<String> createBucket(
    String? id, [
    _i6.BucketOptions? bucketOptions = const _i6.BucketOptions(public: false),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#createBucket, [id, bucketOptions]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#createBucket, [id, bucketOptions]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> updateBucket(
    String? id,
    _i6.BucketOptions? bucketOptions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBucket, [id, bucketOptions]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#updateBucket, [id, bucketOptions]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> emptyBucket(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#emptyBucket, [id]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#emptyBucket, [id]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> deleteBucket(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBucket, [id]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#deleteBucket, [id]),
              ),
            ),
          )
          as _i5.Future<String>);
}

/// A class which mocks [StorageFileApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageFileApi extends _i1.Mock implements _i6.StorageFileApi {
  MockStorageFileApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url =>
      (super.noSuchMethod(
            Invocation.getter(#url),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#url)),
          )
          as String);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i5.Future<String> upload(
    String? path,
    _i8.File? file, {
    _i6.FileOptions? fileOptions = const _i6.FileOptions(),
    int? retryAttempts,
    _i6.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #upload,
              [path, file],
              {
                #fileOptions: fileOptions,
                #retryAttempts: retryAttempts,
                #retryController: retryController,
              },
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #upload,
                  [path, file],
                  {
                    #fileOptions: fileOptions,
                    #retryAttempts: retryAttempts,
                    #retryController: retryController,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> uploadBinary(
    String? path,
    _i10.Uint8List? data, {
    _i6.FileOptions? fileOptions = const _i6.FileOptions(),
    int? retryAttempts,
    _i6.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #uploadBinary,
              [path, data],
              {
                #fileOptions: fileOptions,
                #retryAttempts: retryAttempts,
                #retryController: retryController,
              },
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #uploadBinary,
                  [path, data],
                  {
                    #fileOptions: fileOptions,
                    #retryAttempts: retryAttempts,
                    #retryController: retryController,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> uploadToSignedUrl(
    String? path,
    String? token,
    _i8.File? file, [
    _i6.FileOptions? fileOptions = const _i6.FileOptions(),
    int? retryAttempts,
    _i6.StorageRetryController? retryController,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#uploadToSignedUrl, [
              path,
              token,
              file,
              fileOptions,
              retryAttempts,
              retryController,
            ]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#uploadToSignedUrl, [
                  path,
                  token,
                  file,
                  fileOptions,
                  retryAttempts,
                  retryController,
                ]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> uploadBinaryToSignedUrl(
    String? path,
    String? token,
    _i10.Uint8List? data, [
    _i6.FileOptions? fileOptions = const _i6.FileOptions(),
    int? retryAttempts,
    _i6.StorageRetryController? retryController,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#uploadBinaryToSignedUrl, [
              path,
              token,
              data,
              fileOptions,
              retryAttempts,
              retryController,
            ]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#uploadBinaryToSignedUrl, [
                  path,
                  token,
                  data,
                  fileOptions,
                  retryAttempts,
                  retryController,
                ]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<_i6.SignedUploadURLResponse> createSignedUploadUrl(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#createSignedUploadUrl, [path]),
            returnValue: _i5.Future<_i6.SignedUploadURLResponse>.value(
              _FakeSignedUploadURLResponse_26(
                this,
                Invocation.method(#createSignedUploadUrl, [path]),
              ),
            ),
          )
          as _i5.Future<_i6.SignedUploadURLResponse>);

  @override
  _i5.Future<String> update(
    String? path,
    _i8.File? file, {
    _i6.FileOptions? fileOptions = const _i6.FileOptions(),
    int? retryAttempts,
    _i6.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #update,
              [path, file],
              {
                #fileOptions: fileOptions,
                #retryAttempts: retryAttempts,
                #retryController: retryController,
              },
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #update,
                  [path, file],
                  {
                    #fileOptions: fileOptions,
                    #retryAttempts: retryAttempts,
                    #retryController: retryController,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> updateBinary(
    String? path,
    _i10.Uint8List? data, {
    _i6.FileOptions? fileOptions = const _i6.FileOptions(),
    int? retryAttempts,
    _i6.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateBinary,
              [path, data],
              {
                #fileOptions: fileOptions,
                #retryAttempts: retryAttempts,
                #retryController: retryController,
              },
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #updateBinary,
                  [path, data],
                  {
                    #fileOptions: fileOptions,
                    #retryAttempts: retryAttempts,
                    #retryController: retryController,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> move(
    String? fromPath,
    String? toPath, {
    String? destinationBucket,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #move,
              [fromPath, toPath],
              {#destinationBucket: destinationBucket},
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #move,
                  [fromPath, toPath],
                  {#destinationBucket: destinationBucket},
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> copy(
    String? fromPath,
    String? toPath, {
    String? destinationBucket,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #copy,
              [fromPath, toPath],
              {#destinationBucket: destinationBucket},
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #copy,
                  [fromPath, toPath],
                  {#destinationBucket: destinationBucket},
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> createSignedUrl(
    String? path,
    int? expiresIn, {
    _i6.TransformOptions? transform,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createSignedUrl,
              [path, expiresIn],
              {#transform: transform},
            ),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #createSignedUrl,
                  [path, expiresIn],
                  {#transform: transform},
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<List<_i6.SignedUrl>> createSignedUrls(
    List<String>? paths,
    int? expiresIn,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createSignedUrls, [paths, expiresIn]),
            returnValue: _i5.Future<List<_i6.SignedUrl>>.value(
              <_i6.SignedUrl>[],
            ),
          )
          as _i5.Future<List<_i6.SignedUrl>>);

  @override
  _i5.Future<_i10.Uint8List> download(
    String? path, {
    _i6.TransformOptions? transform,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#download, [path], {#transform: transform}),
            returnValue: _i5.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i5.Future<_i10.Uint8List>);

  @override
  _i5.Future<_i6.FileObjectV2> info(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#info, [path]),
            returnValue: _i5.Future<_i6.FileObjectV2>.value(
              _FakeFileObjectV2_27(this, Invocation.method(#info, [path])),
            ),
          )
          as _i5.Future<_i6.FileObjectV2>);

  @override
  _i5.Future<bool> exists(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [path]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  String getPublicUrl(String? path, {_i6.TransformOptions? transform}) =>
      (super.noSuchMethod(
            Invocation.method(#getPublicUrl, [path], {#transform: transform}),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#getPublicUrl, [path], {#transform: transform}),
            ),
          )
          as String);

  @override
  _i5.Future<List<_i6.FileObject>> remove(List<String>? paths) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [paths]),
            returnValue: _i5.Future<List<_i6.FileObject>>.value(
              <_i6.FileObject>[],
            ),
          )
          as _i5.Future<List<_i6.FileObject>>);

  @override
  _i5.Future<List<_i6.FileObject>> list({
    String? path,
    _i6.SearchOptions? searchOptions = const _i6.SearchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {
              #path: path,
              #searchOptions: searchOptions,
            }),
            returnValue: _i5.Future<List<_i6.FileObject>>.value(
              <_i6.FileObject>[],
            ),
          )
          as _i5.Future<List<_i6.FileObject>>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i11.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setMinLevel(_i11.LogLevel? level) => super.noSuchMethod(
    Invocation.method(#setMinLevel, [level]),
    returnValueForMissingStub: null,
  );

  @override
  void configure({
    _i11.LogLevel? minLevel,
    bool? includeTimestamp,
    bool? includeStackTrace,
  }) => super.noSuchMethod(
    Invocation.method(#configure, [], {
      #minLevel: minLevel,
      #includeTimestamp: includeTimestamp,
      #includeStackTrace: includeStackTrace,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void debug(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void critical(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #critical,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void apiRequest(String? method, String? url, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#apiRequest, [method, url], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void apiResponse(
    String? method,
    String? url,
    int? statusCode, {
    dynamic data,
  }) => super.noSuchMethod(
    Invocation.method(#apiResponse, [method, url, statusCode], {#data: data}),
    returnValueForMissingStub: null,
  );

  @override
  void userAction(String? action, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#userAction, [action], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void navigation(
    String? from,
    String? to, {
    Map<String, dynamic>? arguments,
  }) => super.noSuchMethod(
    Invocation.method(#navigation, [from, to], {#arguments: arguments}),
    returnValueForMissingStub: null,
  );

  @override
  void performance(
    String? operation,
    Duration? duration, {
    Map<String, dynamic>? metrics,
  }) => super.noSuchMethod(
    Invocation.method(#performance, [operation, duration], {#metrics: metrics}),
    returnValueForMissingStub: null,
  );

  @override
  List<_i11.LogEntry> getRecentLogs({int? limit, _i11.LogLevel? minLevel}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentLogs, [], {
              #limit: limit,
              #minLevel: minLevel,
            }),
            returnValue: <_i11.LogEntry>[],
          )
          as List<_i11.LogEntry>);

  @override
  void clearLogs() => super.noSuchMethod(
    Invocation.method(#clearLogs, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, int> getLogStats() =>
      (super.noSuchMethod(
            Invocation.method(#getLogStats, []),
            returnValue: <String, int>{},
          )
          as Map<String, int>);

  @override
  String exportLogs({_i11.LogLevel? minLevel, int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#exportLogs, [], {
              #minLevel: minLevel,
              #limit: limit,
            }),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#exportLogs, [], {
                #minLevel: minLevel,
                #limit: limit,
              }),
            ),
          )
          as String);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i8.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.File get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeFile_28(this, Invocation.getter(#absolute)),
          )
          as _i8.File);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_29(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i8.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_30(this, Invocation.getter(#parent)),
          )
          as _i8.Directory);

  @override
  _i5.Future<_i8.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #recursive: recursive,
              #exclusive: exclusive,
            }),
            returnValue: _i5.Future<_i8.File>.value(
              _FakeFile_28(
                this,
                Invocation.method(#create, [], {
                  #recursive: recursive,
                  #exclusive: exclusive,
                }),
              ),
            ),
          )
          as _i5.Future<_i8.File>);

  @override
  void createSync({bool? recursive = false, bool? exclusive = false}) =>
      super.noSuchMethod(
        Invocation.method(#createSync, [], {
          #recursive: recursive,
          #exclusive: exclusive,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i8.File> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i5.Future<_i8.File>.value(
              _FakeFile_28(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i5.Future<_i8.File>);

  @override
  _i8.File renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeFile_28(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i8.File);

  @override
  _i5.Future<_i8.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i5.Future<_i8.FileSystemEntity>.value(
              _FakeFileSystemEntity_31(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i5.Future<_i8.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i8.File> copy(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copy, [newPath]),
            returnValue: _i5.Future<_i8.File>.value(
              _FakeFile_28(this, Invocation.method(#copy, [newPath])),
            ),
          )
          as _i5.Future<_i8.File>);

  @override
  _i8.File copySync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copySync, [newPath]),
            returnValue: _FakeFile_28(
              this,
              Invocation.method(#copySync, [newPath]),
            ),
          )
          as _i8.File);

  @override
  _i5.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);

  @override
  _i5.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessed, []),
            returnValue: _i5.Future<DateTime>.value(
              _FakeDateTime_32(this, Invocation.method(#lastAccessed, [])),
            ),
          )
          as _i5.Future<DateTime>);

  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessedSync, []),
            returnValue: _FakeDateTime_32(
              this,
              Invocation.method(#lastAccessedSync, []),
            ),
          )
          as DateTime);

  @override
  _i5.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastAccessed, [time]),
            returnValue: _i5.Future<dynamic>.value(),
          )
          as _i5.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastAccessedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i5.Future<DateTime>.value(
              _FakeDateTime_32(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i5.Future<DateTime>);

  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastModifiedSync, []),
            returnValue: _FakeDateTime_32(
              this,
              Invocation.method(#lastModifiedSync, []),
            ),
          )
          as DateTime);

  @override
  _i5.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastModified, [time]),
            returnValue: _i5.Future<dynamic>.value(),
          )
          as _i5.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastModifiedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i8.RandomAccessFile> open({
    _i8.FileMode? mode = _i8.FileMode.read,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#open, [], {#mode: mode}),
            returnValue: _i5.Future<_i8.RandomAccessFile>.value(
              _FakeRandomAccessFile_33(
                this,
                Invocation.method(#open, [], {#mode: mode}),
              ),
            ),
          )
          as _i5.Future<_i8.RandomAccessFile>);

  @override
  _i8.RandomAccessFile openSync({_i8.FileMode? mode = _i8.FileMode.read}) =>
      (super.noSuchMethod(
            Invocation.method(#openSync, [], {#mode: mode}),
            returnValue: _FakeRandomAccessFile_33(
              this,
              Invocation.method(#openSync, [], {#mode: mode}),
            ),
          )
          as _i8.RandomAccessFile);

  @override
  _i5.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i5.Stream<List<int>>.empty(),
          )
          as _i5.Stream<List<int>>);

  @override
  _i8.IOSink openWrite({
    _i8.FileMode? mode = _i8.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openWrite, [], {
              #mode: mode,
              #encoding: encoding,
            }),
            returnValue: _FakeIOSink_34(
              this,
              Invocation.method(#openWrite, [], {
                #mode: mode,
                #encoding: encoding,
              }),
            ),
          )
          as _i8.IOSink);

  @override
  _i5.Future<_i10.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i5.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i5.Future<_i10.Uint8List>);

  @override
  _i10.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytesSync, []),
            returnValue: _i10.Uint8List(0),
          )
          as _i10.Uint8List);

  @override
  _i5.Future<String> readAsString({
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  String readAsStringSync({_i12.Encoding? encoding = const _i12.Utf8Codec()}) =>
      (super.noSuchMethod(
            Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            ),
          )
          as String);

  @override
  _i5.Future<List<String>> readAsLines({
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLines, [], {#encoding: encoding}),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  List<String> readAsLinesSync({
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<_i8.File> writeAsBytes(
    List<int>? bytes, {
    _i8.FileMode? mode = _i8.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsBytes,
              [bytes],
              {#mode: mode, #flush: flush},
            ),
            returnValue: _i5.Future<_i8.File>.value(
              _FakeFile_28(
                this,
                Invocation.method(
                  #writeAsBytes,
                  [bytes],
                  {#mode: mode, #flush: flush},
                ),
              ),
            ),
          )
          as _i5.Future<_i8.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i8.FileMode? mode = _i8.FileMode.write,
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(#writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i8.File> writeAsString(
    String? contents, {
    _i8.FileMode? mode = _i8.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [contents],
              {#mode: mode, #encoding: encoding, #flush: flush},
            ),
            returnValue: _i5.Future<_i8.File>.value(
              _FakeFile_28(
                this,
                Invocation.method(
                  #writeAsString,
                  [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush},
                ),
              ),
            ),
          )
          as _i5.Future<_i8.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i8.FileMode? mode = _i8.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeAsStringSync,
      [contents],
      {#mode: mode, #encoding: encoding, #flush: flush},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i5.Future<_i8.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i5.Future<_i8.FileStat>.value(
              _FakeFileStat_35(this, Invocation.method(#stat, [])),
            ),
          )
          as _i5.Future<_i8.FileStat>);

  @override
  _i8.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_35(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i8.FileStat);

  @override
  _i5.Stream<_i8.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i5.Stream<_i8.FileSystemEvent>.empty(),
          )
          as _i5.Stream<_i8.FileSystemEvent>);
}
