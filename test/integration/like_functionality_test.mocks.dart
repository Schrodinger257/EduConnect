// Mocks generated by Mockito 5.4.6 from annotations
// in educonnect/test/integration/like_functionality_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i12;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:educonnect/core/logger.dart' as _i14;
import 'package:educonnect/core/result.dart' as _i5;
import 'package:educonnect/modules/comment.dart' as _i9;
import 'package:educonnect/modules/post.dart' as _i6;
import 'package:educonnect/modules/user.dart' as _i11;
import 'package:educonnect/repositories/post_repository.dart' as _i3;
import 'package:educonnect/repositories/user_repository.dart' as _i10;
import 'package:educonnect/services/navigation_service.dart' as _i13;
import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake
    implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i2.Mock implements _i3.PostRepository {
  MockPostRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Result<List<_i6.Post>>> getPosts({
    int? limit = 10,
    _i7.DocumentSnapshot<Object?>? lastDocument,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPosts, [], {
              #limit: limit,
              #lastDocument: lastDocument,
            }),
            returnValue: _i4.Future<_i5.Result<List<_i6.Post>>>.value(
              _i8.dummyValue<_i5.Result<List<_i6.Post>>>(
                this,
                Invocation.method(#getPosts, [], {
                  #limit: limit,
                  #lastDocument: lastDocument,
                }),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<_i6.Post>>>);

  @override
  _i4.Future<_i5.Result<List<_i6.Post>>> getUserPosts({
    required String? userId,
    int? limit = 10,
    _i7.DocumentSnapshot<Object?>? lastDocument,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserPosts, [], {
              #userId: userId,
              #limit: limit,
              #lastDocument: lastDocument,
            }),
            returnValue: _i4.Future<_i5.Result<List<_i6.Post>>>.value(
              _i8.dummyValue<_i5.Result<List<_i6.Post>>>(
                this,
                Invocation.method(#getUserPosts, [], {
                  #userId: userId,
                  #limit: limit,
                  #lastDocument: lastDocument,
                }),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<_i6.Post>>>);

  @override
  _i4.Future<_i5.Result<_i6.Post>> createPost(_i6.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [post]),
            returnValue: _i4.Future<_i5.Result<_i6.Post>>.value(
              _i8.dummyValue<_i5.Result<_i6.Post>>(
                this,
                Invocation.method(#createPost, [post]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i6.Post>>);

  @override
  _i4.Future<_i5.Result<void>> deletePost(String? postId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePost, [postId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#deletePost, [postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<void>> toggleLike(String? postId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLike, [postId, userId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#toggleLike, [postId, userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<List<_i9.Comment>>> getComments(String? postId) =>
      (super.noSuchMethod(
            Invocation.method(#getComments, [postId]),
            returnValue: _i4.Future<_i5.Result<List<_i9.Comment>>>.value(
              _i8.dummyValue<_i5.Result<List<_i9.Comment>>>(
                this,
                Invocation.method(#getComments, [postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<_i9.Comment>>>);

  @override
  _i4.Future<_i5.Result<_i9.Comment>> addComment(
    String? postId,
    _i9.Comment? comment,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addComment, [postId, comment]),
            returnValue: _i4.Future<_i5.Result<_i9.Comment>>.value(
              _i8.dummyValue<_i5.Result<_i9.Comment>>(
                this,
                Invocation.method(#addComment, [postId, comment]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i9.Comment>>);

  @override
  _i4.Future<_i5.Result<void>> deleteComment(
    String? commentId,
    String? postId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteComment, [commentId, postId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#deleteComment, [commentId, postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<_i9.Comment>> updateComment(_i9.Comment? comment) =>
      (super.noSuchMethod(
            Invocation.method(#updateComment, [comment]),
            returnValue: _i4.Future<_i5.Result<_i9.Comment>>.value(
              _i8.dummyValue<_i5.Result<_i9.Comment>>(
                this,
                Invocation.method(#updateComment, [comment]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i9.Comment>>);

  @override
  _i4.Stream<List<_i6.Post>> getPostsStream({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getPostsStream, [], {#limit: limit}),
            returnValue: _i4.Stream<List<_i6.Post>>.empty(),
          )
          as _i4.Stream<List<_i6.Post>>);

  @override
  _i4.Stream<List<_i9.Comment>> getCommentsStream(String? postId) =>
      (super.noSuchMethod(
            Invocation.method(#getCommentsStream, [postId]),
            returnValue: _i4.Stream<List<_i9.Comment>>.empty(),
          )
          as _i4.Stream<List<_i9.Comment>>);

  @override
  _i4.Future<_i5.Result<List<_i6.Post>>> searchPosts(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchPosts, [query]),
            returnValue: _i4.Future<_i5.Result<List<_i6.Post>>>.value(
              _i8.dummyValue<_i5.Result<List<_i6.Post>>>(
                this,
                Invocation.method(#searchPosts, [query]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<_i6.Post>>>);

  @override
  _i4.Stream<List<_i6.Post>> getBookmarkedPosts(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarkedPosts, [userId]),
            returnValue: _i4.Stream<List<_i6.Post>>.empty(),
          )
          as _i4.Stream<List<_i6.Post>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i2.Mock implements _i10.UserRepository {
  MockUserRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Result<_i11.User>> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i4.Future<_i5.Result<_i11.User>>.value(
              _i8.dummyValue<_i5.Result<_i11.User>>(
                this,
                Invocation.method(#getUserById, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i11.User>>);

  @override
  _i4.Future<_i5.Result<_i11.User>> updateUser(_i11.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [user]),
            returnValue: _i4.Future<_i5.Result<_i11.User>>.value(
              _i8.dummyValue<_i5.Result<_i11.User>>(
                this,
                Invocation.method(#updateUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i11.User>>);

  @override
  _i4.Future<_i5.Result<String>> uploadProfileImage(
    _i12.File? image,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#uploadProfileImage, [image, userId]),
            returnValue: _i4.Future<_i5.Result<String>>.value(
              _i8.dummyValue<_i5.Result<String>>(
                this,
                Invocation.method(#uploadProfileImage, [image, userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<String>>);

  @override
  _i4.Future<_i5.Result<void>> deleteProfileImage(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProfileImage, [userId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#deleteProfileImage, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<List<_i11.User>>> searchUsers(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchUsers, [query]),
            returnValue: _i4.Future<_i5.Result<List<_i11.User>>>.value(
              _i8.dummyValue<_i5.Result<List<_i11.User>>>(
                this,
                Invocation.method(#searchUsers, [query]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<_i11.User>>>);

  @override
  _i4.Future<_i5.Result<List<_i11.User>>> getUsersByRole(_i11.UserRole? role) =>
      (super.noSuchMethod(
            Invocation.method(#getUsersByRole, [role]),
            returnValue: _i4.Future<_i5.Result<List<_i11.User>>>.value(
              _i8.dummyValue<_i5.Result<List<_i11.User>>>(
                this,
                Invocation.method(#getUsersByRole, [role]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<_i11.User>>>);

  @override
  _i4.Future<_i5.Result<void>> toggleBookmark(String? userId, String? postId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleBookmark, [userId, postId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#toggleBookmark, [userId, postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<List<String>>> getBookmarks(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarks, [userId]),
            returnValue: _i4.Future<_i5.Result<List<String>>>.value(
              _i8.dummyValue<_i5.Result<List<String>>>(
                this,
                Invocation.method(#getBookmarks, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<String>>>);

  @override
  _i4.Future<_i5.Result<void>> updateLikedPosts(
    String? userId,
    List<String>? likedPosts,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateLikedPosts, [userId, likedPosts]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#updateLikedPosts, [userId, likedPosts]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<void>> enrollInCourse(
    String? userId,
    String? courseId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#enrollInCourse, [userId, courseId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#enrollInCourse, [userId, courseId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<void>> unenrollFromCourse(
    String? userId,
    String? courseId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#unenrollFromCourse, [userId, courseId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#unenrollFromCourse, [userId, courseId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<List<String>>> getEnrolledCourses(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getEnrolledCourses, [userId]),
            returnValue: _i4.Future<_i5.Result<List<String>>>.value(
              _i8.dummyValue<_i5.Result<List<String>>>(
                this,
                Invocation.method(#getEnrolledCourses, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<List<String>>>);

  @override
  _i4.Future<_i5.Result<_i11.User>> createUser(_i11.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue: _i4.Future<_i5.Result<_i11.User>>.value(
              _i8.dummyValue<_i5.Result<_i11.User>>(
                this,
                Invocation.method(#createUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i11.User>>);

  @override
  _i4.Future<_i5.Result<void>> deleteUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [userId]),
            returnValue: _i4.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#deleteUser, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<void>>);

  @override
  _i4.Future<_i5.Result<bool>> userExists(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#userExists, [userId]),
            returnValue: _i4.Future<_i5.Result<bool>>.value(
              _i8.dummyValue<_i5.Result<bool>>(
                this,
                Invocation.method(#userExists, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<bool>>);

  @override
  _i4.Future<_i5.Result<Map<String, int>>> getUserStatistics(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserStatistics, [userId]),
            returnValue: _i4.Future<_i5.Result<Map<String, int>>>.value(
              _i8.dummyValue<_i5.Result<Map<String, int>>>(
                this,
                Invocation.method(#getUserStatistics, [userId]),
              ),
            ),
          )
          as _i4.Future<_i5.Result<Map<String, int>>>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i2.Mock implements _i13.NavigationService {
  MockNavigationService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(
            Invocation.getter(#navigatorKey),
            returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
              this,
              Invocation.getter(#navigatorKey),
            ),
          )
          as _i1.GlobalKey<_i1.NavigatorState>);

  @override
  _i4.Future<T?> navigateTo<T extends Object?>(_i1.Widget? screen) =>
      (super.noSuchMethod(
            Invocation.method(#navigateTo, [screen]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateAndReplace<T extends Object?, TO extends Object?>(
    _i1.Widget? screen,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#navigateAndReplace, [screen]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  void goBack<T extends Object?>([T? result]) => super.noSuchMethod(
    Invocation.method(#goBack, [result]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<T?> navigateToNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #navigateToNamed,
              [routeName],
              {#arguments: arguments},
            ),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateAndReplaceNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #navigateAndReplaceNamed,
              [routeName],
              {#arguments: arguments},
            ),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateAndClearStack<T extends Object?>(_i1.Widget? screen) =>
      (super.noSuchMethod(
            Invocation.method(#navigateAndClearStack, [screen]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> showCustomModalBottomSheet<T>({
    required _i1.Widget? child,
    bool? isScrollControlled = false,
    bool? useSafeArea = false,
    bool? isDismissible = true,
    bool? enableDrag = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showCustomModalBottomSheet, [], {
              #child: child,
              #isScrollControlled: isScrollControlled,
              #useSafeArea: useSafeArea,
              #isDismissible: isDismissible,
              #enableDrag: enableDrag,
            }),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> showCustomDialog<T>({
    required _i1.Widget? child,
    bool? barrierDismissible = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showCustomDialog, [], {
              #child: child,
              #barrierDismissible: barrierDismissible,
            }),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  void showSnackBar({
    required String? message,
    dynamic backgroundColor,
    Duration? duration = const Duration(seconds: 3),
    _i1.SnackBarAction? action,
  }) => super.noSuchMethod(
    Invocation.method(#showSnackBar, [], {
      #message: message,
      #backgroundColor: backgroundColor,
      #duration: duration,
      #action: action,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void showSuccessSnackBar(String? message) => super.noSuchMethod(
    Invocation.method(#showSuccessSnackBar, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void showErrorSnackBar(String? message) => super.noSuchMethod(
    Invocation.method(#showErrorSnackBar, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void showInfoSnackBar(String? message) => super.noSuchMethod(
    Invocation.method(#showInfoSnackBar, [message]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i2.Mock implements _i14.Logger {
  MockLogger() {
    _i2.throwOnMissingStub(this);
  }

  @override
  void setMinLevel(_i14.LogLevel? level) => super.noSuchMethod(
    Invocation.method(#setMinLevel, [level]),
    returnValueForMissingStub: null,
  );

  @override
  void configure({
    _i14.LogLevel? minLevel,
    bool? includeTimestamp,
    bool? includeStackTrace,
  }) => super.noSuchMethod(
    Invocation.method(#configure, [], {
      #minLevel: minLevel,
      #includeTimestamp: includeTimestamp,
      #includeStackTrace: includeStackTrace,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void debug(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void critical(String? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #critical,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void apiRequest(String? method, String? url, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#apiRequest, [method, url], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void apiResponse(
    String? method,
    String? url,
    int? statusCode, {
    dynamic data,
  }) => super.noSuchMethod(
    Invocation.method(#apiResponse, [method, url, statusCode], {#data: data}),
    returnValueForMissingStub: null,
  );

  @override
  void userAction(String? action, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#userAction, [action], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void navigation(
    String? from,
    String? to, {
    Map<String, dynamic>? arguments,
  }) => super.noSuchMethod(
    Invocation.method(#navigation, [from, to], {#arguments: arguments}),
    returnValueForMissingStub: null,
  );

  @override
  void performance(
    String? operation,
    Duration? duration, {
    Map<String, dynamic>? metrics,
  }) => super.noSuchMethod(
    Invocation.method(#performance, [operation, duration], {#metrics: metrics}),
    returnValueForMissingStub: null,
  );

  @override
  List<_i14.LogEntry> getRecentLogs({int? limit, _i14.LogLevel? minLevel}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentLogs, [], {
              #limit: limit,
              #minLevel: minLevel,
            }),
            returnValue: <_i14.LogEntry>[],
          )
          as List<_i14.LogEntry>);

  @override
  void clearLogs() => super.noSuchMethod(
    Invocation.method(#clearLogs, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, int> getLogStats() =>
      (super.noSuchMethod(
            Invocation.method(#getLogStats, []),
            returnValue: <String, int>{},
          )
          as Map<String, int>);

  @override
  String exportLogs({_i14.LogLevel? minLevel, int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#exportLogs, [], {
              #minLevel: minLevel,
              #limit: limit,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#exportLogs, [], {
                #minLevel: minLevel,
                #limit: limit,
              }),
            ),
          )
          as String);
}
